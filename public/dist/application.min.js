"use strict";var ApplicationConfiguration=function(){var applicationModuleName="sense-forage",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ngSocial","slugifier"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("admin"),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("categories"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("partners"),ApplicationConfiguration.registerModule("products"),ApplicationConfiguration.registerModule("statics"),ApplicationConfiguration.registerModule("users"),angular.module("admin").run(["Menus",function(Menus){Menus.addMenuItem("admin","Admin","admin","dropdown","/"),Menus.addSubMenuItem("admin","admin","User Control","admin/usercontrol")}]),angular.module("admin").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin-usercontrol-list",{url:"/admin/usercontrol",templateUrl:"modules/admin/views/user-list.client.view.html"}).state("admin-usercontrol-edit",{url:"/admin/usercontrol/:userId/edit",templateUrl:"modules/admin/views/user-edit.client.view.html"})}]);var adminApp=angular.module("admin");adminApp.controller("UserController",["$scope","$http","$location","Authentication","UsersAdmin",function($scope,$http,$location,Authentication,UsersAdmin){$scope.authentication=Authentication,this.users=UsersAdmin.query()}]),adminApp.controller("UserEditController",["$scope","$stateParams","$location","UsersAdmin",function($scope,$stateParams,$location,UsersAdmin){this.findOne=function(){$scope.user=UsersAdmin.get({userId:$stateParams.userId})},this.update=function(){var user=$scope.user;user.$update(function(){$location.path("admin/usercontrol"+user._id)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("admin").factory("UsersAdmin",["$resource",function($resource){return $resource("admin/usercontrol/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","item","/articles(?:/[^/]+)?",null,null,7),Menus.addMenuItem("admin","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("admin","articles","List Articles","articles"),Menus.addSubMenuItem("admin","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]);var articlesApp=angular.module("articles");articlesApp.controller("ArticlesController",["$scope","$stateParams","Authentication","Articles",function($scope,$stateParams,Authentication,Articles){$scope.authentication=Authentication,this.find=function(){$scope.articles=Articles.query()},this.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),articlesApp.controller("ArticlesEditController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){this.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},this.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})},this.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})}}]),articlesApp.controller("ArticlesCreateController",["$scope","$location","Authentication","Articles",function($scope,$location,Authentication,Articles){$scope.authentication=Authentication,this.create=function(){var article=new Articles({name:$scope.name});article.$save(function(response){$location.path("articles/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("categories").run(["Menus",function(Menus){Menus.addMenuItem("admin","Categories","categories","dropdown","/categories(/create)?"),Menus.addSubMenuItem("admin","categories","List Categories","categories"),Menus.addSubMenuItem("admin","categories","New Category","categories/create")}]),angular.module("categories").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCategories",{url:"/categories",templateUrl:"modules/categories/views/list-categories.client.view.html"}).state("createCategory",{url:"/categories/create",templateUrl:"modules/categories/views/create-category.client.view.html"}).state("viewCategory",{url:"/categories/:categoryId",templateUrl:"modules/categories/views/view-category.client.view.html"}).state("editCategory",{url:"/categories/:categoryId/edit",templateUrl:"modules/categories/views/edit-category.client.view.html"})}]);var categoriesApp=angular.module("categories");categoriesApp.controller("CategoriesController",["$scope","$stateParams","Authentication","Categories","ProductsListByCat",function($scope,$stateParams,Authentication,Categories,ProductsListByCat){this.authentication=Authentication,this.categories=Categories.query(),this.findOne=function(){$scope.category=Categories.get({categoryId:$stateParams.categoryId}),this.ProductsList=ProductsListByCat.query({categoryId:$stateParams.categoryId})}}]),categoriesApp.controller("CategoriesCreateController",["$scope","$location","Authentication","Categories",function($scope,$location,Authentication,Categories){this.authentication=Authentication,this.create=function(){var category=new Categories({name:$scope.name});category.$save(function(response){$location.path("categories/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})}}]),categoriesApp.controller("CategoriesEditController",["$scope","$stateParams","Categories",function($scope,$stateParams,Categories){$scope.find=function(){$scope.categories=Categories.query()},$scope.findOne=function(){$scope.category=Categories.get({categoryId:$stateParams.categoryId})}}]),angular.module("categories").factory("Categories",["$resource",function($resource){return $resource("categories/:categoryId",{categoryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("categories").factory("ProductsListByCat",["$resource",function($resource){return $resource("categories/:categoryId/list",{categoryId:"@_id"})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$rootScope","$window","Authentication","Menus",function($scope,$rootScope,$window,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.adminMenu=Menus.getMenu("admin"),$rootScope.url=$window.location.href,$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){$rootScope.url=$window.location.href}),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("TabsCtrl",["$scope","$window",function($scope,$window){}]),angular.module("core").directive("updateTitle",["$rootScope","$timeout",function($rootScope,$timeout){return{link:function(scope,element){var listener=function(event,toState,$stateParams){var title="Sense Forage";if(toState.data&&toState.data.pageTitle&&(title=title+" - "+toState.data.pageTitle),$stateParams.productSlug){var subtitle=$stateParams.productSlug.split("-").join(" ");title=title+" - "+subtitle}$timeout(function(){element.text(title)},0,!1)};$rootScope.$on("$stateChangeSuccess",listener)}}}]),angular.module("core").directive("updateUrl",["$rootScope","$timeout",function($rootScope,$timeout){return{link:function(scope,element){var listener=function(event,toState){var url="Default Url";toState.data&&toState.data.url&&(url=toState.data.url),$timeout(function(){element.text(url)},0,!1)};$rootScope.$on("$stateChangeSuccess",listener)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",!0),this.addMenu("admin",!1,["admin"])}]),angular.module("partners").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Partners","partners","item","/partners(?:/[^/]+)?",null,null,6),Menus.addMenuItem("admin","Partners","partners","dropdown","/partners(/create)?"),Menus.addSubMenuItem("admin","partners","List Partners","partners"),Menus.addSubMenuItem("admin","partners","New Partner","partners/create")}]),angular.module("partners").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPartners",{url:"/partners",templateUrl:"modules/partners/views/list-partners.client.view.html"}).state("createPartner",{url:"/partners/create",templateUrl:"modules/partners/views/create-partner.client.view.html"}).state("viewPartner",{url:"/partners/:partnerId",templateUrl:"modules/partners/views/view-partner.client.view.html"}).state("editPartner",{url:"/partners/:partnerId/edit",templateUrl:"modules/partners/views/edit-partner.client.view.html"})}]);var partnersApp=angular.module("partners");partnersApp.controller("PartnersController",["$scope","$stateParams","Authentication","Partners","ProductsListByPartner",function($scope,$stateParams,Authentication,Partners,ProductsListByPartner){$scope.authentication=Authentication,this.partners=Partners.query(),this.findOne=function(){$scope.partner=Partners.get({partnerId:$stateParams.partnerId}),$scope.slides=[1,2,3,4,5],this.productsList=ProductsListByPartner.query({partnerId:$stateParams.partnerId})}}]),partnersApp.controller("PartnersCreateController",["$scope","$location","Authentication","Partners",function($scope,$location,Authentication,Partners){this.authentication=Authentication,this.create=function(){var partner=new Partners({name:$scope.name});partner.$save(function(response){$location.path("partners/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})}}]),partnersApp.controller("PartnersEditController",["$scope","$stateParams","Partners","$modal","$log","$location",function($scope,$stateParams,Partners,$modal,$log,$location){this.logoUpdate=function(size,selectedPartner){var modalInstance=$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/partners/views/logo-update.client.view.html",controller:["$scope","$modalInstance","partner",function($scope,$modalInstance,partner){$scope.partner=partner}],size:size,resolve:{partner:function(){return selectedPartner}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},this.toggleAnimation=function(){$scope.animationsEnabled=!$scope.animationsEnabled},this.addHeader=function(){var partner=$scope.partner;partner.header.push({link:"enter link"})},this.deleteHeader=function(index){var partner=$scope.partner;partner.header.splice(index,1)},this.update=function(){var partner=$scope.partner;partner.$update(function(){$location.path("partners/"+partner._id)},function(errorResponse){$scope.error=errorResponse.data.message})},this.findOne=function(){$scope.partner=Partners.get({partnerId:$stateParams.partnerId})}}]),angular.module("partners").directive("disableAnimation",["$animate",function($animate){return{restrict:"A",link:function($scope,$element,$attrs){$attrs.$observe("disableAnimation",function(value){$animate.enabled(!value,$element)})}}}]),angular.module("partners").factory("Partners",["$resource",function($resource){return $resource("partners/:partnerId",{partnerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("partners").factory("ProductsListByPartner",["$resource",function($resource){return $resource("partners/:partnerId/list",{partnerId:"@_id"})}]),angular.module("products").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Products","products","item","/products(?:/[^/]+)?",null,null,8),Menus.addMenuItem("admin","Products","products","dropdown","/products(/create)?"),Menus.addSubMenuItem("admin","products","List Products","products"),Menus.addSubMenuItem("admin","products","New Product","products/create")}]),angular.module("products").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProducts",{url:"/products",templateUrl:"modules/products/views/list-products.client.view.html",data:{pageTitle:"Product Listing"}}).state("createProduct",{url:"/products/create",templateUrl:"modules/products/views/create-product.client.view.html"}).state("viewProduct",{url:"/products/item/:productSlug",templateUrl:"modules/products/views/view-product.client.view.html"}).state("editProduct",{url:"/products/:productId/edit",templateUrl:"modules/products/views/edit-product.client.view.html"})}]);var productsApp=angular.module("products");productsApp.controller("ProductsController",["$scope","$stateParams","$rootScope","Authentication","Products","Partners",function($scope,$stateParams,$rootScope,Authentication,Products,Partners){$scope.authentication=Authentication,this.find=function(){$scope.products=Products.query()},this.findOne=function(){Products.getBySlug({slug:$stateParams.productSlug}).$promise.then(function(product){$scope.product=product})}}]),productsApp.controller("ProductsCreateController",["$scope","$location","Authentication","Products","Slug",function($scope,$location,Authentication,Products,Slug){this.authentication=Authentication,this.create=function(){var product=new Products({name:$scope.name,category:$scope.categoryId,slug:Slug.slugify($scope.name)});product.$save(function(response){$location.path("products/item/"+response.slug),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})}}]),productsApp.controller("ProductsEditController",["$scope","$stateParams","$rootScope","$location","Products","Categories","Partners","$modal","$log","Slug",function($scope,$stateParams,$rootScope,$location,Products,Categories,Partners,$modal,$log,Slug){this.find=function(){$scope.products=Products.query()},this.categories=Categories.query(),this.partners=Partners.query(),this.findOne=function(){$scope.product=Products.get({productId:$stateParams.productId})},this.update=function(){var product=$scope.product;product.slug=Slug.slugify(product.name),product.$update(function(){$location.path("products/item/"+product.slug)},function(errorResponse){$scope.error=errorResponse.data.message})},this.addSpec=function(){var product=$scope.product;product.specification.push({title:"enter new spec",descript:"enter descript"})},this.deleteSpec=function(index){var product=$scope.product;product.specification.splice(index,1)},this.addImage=function(){var product=$scope.product;product.images.push({link:"enter link",descript:"enter descript"})},this.deleteImage=function(index){var product=$scope.product;product.images.splice(index,1)},this.specUpdate=function(size,selectedProduct){var modalInstance=$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/products/views/spec-update.client.view.html",controller:["$scope","$modalInstance","product",function($scope,$modalInstance,product){$scope.product=product}],size:size,resolve:{product:function(){return selectedProduct}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},this.toggleAnimation=function(){$scope.animationsEnabled=!$scope.animationsEnabled}}]),angular.module("products").factory("Products",["$resource",function($resource){return $resource("products/:productId/:controller",{productId:"@_id"},{update:{method:"PUT"},getBySlug:{method:"GET",params:{controller:"read-slug"}}})}]),angular.module("statics").config(["$stateProvider",function($stateProvider){$stateProvider.state("statics",{url:"/aboutus",templateUrl:"modules/statics/views/statics.client.view.html",data:{pageTitle:"About Us"}})}]),angular.module("statics").run(["Menus",function(Menus){Menus.addMenuItem("topbar","About Us","aboutus","item","/aboutus(?:/[^/]+)?",null,null,0),Menus.addMenuItem("topbar","Contact","contact","item","/contact(?:/[^/]+)?",null,null,10)}]),angular.module("statics").controller("StaticsController",["$scope",function($scope){}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);